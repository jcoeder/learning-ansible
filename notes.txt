Playbook: The file you create that defines your desired automation process by calling a series of module.  Ansible executes the playbook, calling the modules that implement the taks needed to perform the deisred automation

Module:  A program that accomplishes a specific task, like coping a file, installing software, or rebooting a device

Task:  Within a playbook, a task is a call to execute a module that does a specific job, like copy a file.  Tasks usually include one or more arguements, data that adds detial to what the module should do, such as name of the file to copy, or the IP address of the device to configure.

Play:  Within a playbook, a play is a collection of tasks.  A splaybook will have one or more plays.  If a playbook contains mulitople plays, it is likely that the plays have different requirements.  Example, they may execute on different hosts.

Facts:  As a playbook executes, Ansible learns about the hosts involved.  The learned data are called facts and may be referenece by name in the playbook.

Variable:  Data about a host or group declared by the user.  LIke facts, variables can be referenced by name.  The difference is that variable are declared by the user, not by Ansible.

Role:  A way of organizsing desired behaviro into reusable units.  Roles consist of tasks, variables, and other elements that can be incorporated into mulitple playbooks.

Template:  A file containing some static text, such as device configuration commands, but with some places where Ansible will "fill-in-the-blanks" with data specific to each device, such as the hostname or an IP address.  Templates can be used to generate configuration files that contain device-specific settings, or to format and save facts gathered from devices in a human-friendly format.  Templates are written using the Jinja2 language.

Inventory:  The list of device that Ansible knows abou, possibly with some pre-set vairables about each device, such as the devices management IP address.  Inventory is often stored in a single file named inventory, or in a set of files in a directory called inventory

Groups:  Within the inventory of devices, you can define groups that describe collections of devices you can refer to by name, for example, a group called routers  vs a group called switches.

group_vars and host_vars:  Directories in which you can place files containing variables about groups of hosts.  The file in the group_vars and host_vars directories let you define more variables, or variables containing more complex data.

ansible --list-hosts all
  hosts (3):
    qfx1
    qfx2
    qfx3


Raw Module
Tell Ansible to run aginsts the group 'all' in the file 'hosts' using the module 'raw' and the arguement to that module 'show system uptime'  Log in with user 'justin' and prompt for the password
ansible all -i hosts -m raw -a 'cli' 'show system time' -u justin -k



yum install ansible -y
curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py
python get-pip.py

Needed for Juniper
pip install --upgrade setuptools
pip install ncclient
pip install junos-eznc --ignore-installed PyYAML
ansible-galaxy install Juniper.junos
ansible --connection=local juniper_qfx -i hosts -m junos_facts

Needed for Cumulus

Needed for NXOS

Needed for IOS

Needed for EOS

/etc/ansible/ansible.cfg
# uncomment this to disable SSH key host checking
host_key_checking = False


/etc/ansible/hosts

# This is the default ansible 'hosts' file.
#
# It should live in /etc/ansible/hosts
#
#   - Comments begin with the '#' character
#   - Blank lines are ignored
#   - Groups of hosts are delimited by [header] elements
#   - You can enter hostnames or ip addresses
#   - A hostname/ip can be a member of multiple groups

[juniper_qfx]
qfx1 ansible_user=justin ansible_ssh_pass=Lab12345! ansible_connection=local
qfx2 ansible_user=justin ansible_ssh_pass=Lab12345!

[cumulus]
cumulus1 ansible_user=cumulus ansible_ssh_pass=Lab12345!
cumulus2 ansible_user=cumulus ansible_ssh_pass=Lab12345!

[cisco_nxos]
nxos1 ansible_user=justin ansible_ssh_pass=Lab12345!
nxos2 ansible_user=justin ansible_ssh_pass=Lab12345!

[cisco_ios]
ios1 ansible_user=justin ansible_ssh_pass=Lab12345!
ios2 ansible_user=justin ansible_ssh_pass=Lab12345!

[arista]
eos1 ansible_user=justin ansible_ssh_pass=Lab12345!
eos2 ansible_user=justin ansible_ssh_pass=Lab12345!

ansible --list-hosts all
ansible --list-hosts "*"
ansible --list-hosts juniper-qfx,cisco-iol
ansible --list-hosts \!juniper-qfx






---
- name: IOS Example
  gather_facts: false
  hosts: cisco-iol

  roles:
    - ansible-network.network-engine                            - installed from galaxy - used to parse text return

  tasks:
    - name: Run Cisco IOS Command 'show version'
      ios_command:
        commands:
          - show version
      register: out                                             - save output as variable 'out'

    - name: Print output
      debug:
        msg: "{{ out.stdout[0] }}"                              - 0th element only (removes outer list)

    - name: Run Cisco IOS Command 'show ip interface brief'
      ios_command:
        commands:
          - show ip interface brief
      register: out

    - name: Print output
      debug:
        msg: "{{ out.stdout_lines[0][2] }}"                     -3rd line of the 0th element

    - name: Parse raw output
      command_parser:
        file: "parsers/ios/show_ip_interface_brief.yaml"        - parser configuration file
        content: "{{ out.stdout[0] }}"                          - content to parse

    - name: Configure Hostname
      ios_config:
        lines: hostname {{ inventory_hostname }}
      tags: config                                              - tags can be used to call only certian tasks

    - name: Configure OSPF
      ios_config:
        lines:
          - no ip address
          - ip ospf 1 area 0.0.0.0
        parents: "{{ item }}"                                   - looping over interfaces
      with_items:                                               - looping over interfaces
       - interface Ethernet0/0
       - interface Ethernet0/1
       - interface Ethernet0/2
      tags: config                                              - tags can be used to call only certian tasks
